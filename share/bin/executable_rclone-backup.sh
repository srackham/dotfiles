#!/usr/bin/env bash

# Backs up most important data from /home to Google Drive.
#
# - Executed on OMV server.
# - rclone config generated by user super.
# - Run backups as root.

set -u  # No unbound variables.
set -e  # Exit on error.
#set -x  # Echo commands

CMD=$(basename $0 .sh)

# Configuration variables.
# Do not use the $HOME env variable (the script is run by root).
BIN=/files/users/srackham/bin
CONFIG=/home/super/.config/rclone/rclone.conf
LOGFILE=/tmp/$CMD.log
FILTERS=$BIN/rclone-backup-filters
SRC=/files
#REMOTE=gdrive     # Google remote drive (default rclone client).
REMOTE=gdrive2     # Google remote drive (custom rclone client).
DST=$REMOTE:/backups/current
BACKUP_DIR=$REMOTE:/backups/old/$(date -I)

# Documentation variables.
BACKUP_DOCS=$(cat <<EOF
NAME
    $CMD

SYNOPSIS
    $CMD [OPTIONS]
    $CMD help|-h|--help

DESCRIPTION
    Uses the rclone(1) sync command to backup from local
    '$SRC' directory to remote '$DST' directory.
    File selection filters are sourced from '$FILTERS'.
    Files which would be overwritten or deleted are moved
    to '$BACKUP_DIR'.
    OPTIONS are rclone(1) command flags.
    The log file is '$LOGFILE'.
EOF
)
RESTORE_DOCS=$(cat <<EOF
NAME
    $CMD

SYNOPSIS
    $CMD SOURCE_DIR DEST_DIR [OPTIONS]
    $CMD help|-h|--help

DESCRIPTION
    Use the rclone(1) copy command to restore directory from
    '$DST/SOURCE_DIR' to 'DEST_DIR'.
    OPTIONS are rclone(1) command flags.

    For example '$CMD users/srackham/doc/poems /tmp/poems'
    restores the remote directory '$DST/users/srackham/doc/poems'
    and its contents to the local directory '/tmp/poems'.
    If '/tmp/poems' directory does not exist it is created.
    The log file is '$LOGFILE'.
EOF
)

case "$@" in
    help|-h|--help)
        echo
        case $CMD in
            rclone-backup)
                echo "$BACKUP_DOCS"
            ;;
            rclone-restore)
                echo "$RESTORE_DOCS"
            ;;
        esac
        exit
        ;;
esac

echo `date`: Starting $CMD | tee $LOGFILE
err_msg=""
case $CMD in
    rclone-backup)
        /usr/bin/rclone sync \
            $SRC \
            $DST \
            --config $CONFIG \
            --backup-dir $BACKUP_DIR \
            --filter-from $FILTERS \
            --delete-during \
            --delete-excluded \
            --fast-list \
            --skip-links \
            --stats 30m \
            --log-level INFO \
            $@ \
            2>&1 | tee --append $LOGFILE
        exit_code=$?
        ;;
    rclone-restore)
        /usr/bin/rclone copy $DST/$@ \
            --config $CONFIG \
            --stats 30m \
            --log-level INFO \
            2>&1 | tee --append $LOGFILE
        exit_code=$?
        ;;
    *)
        err_msg="command must be named rclone-backup or rclone-restore"
        exit_code=1
        ;;
esac

if [ $exit_code -eq 0 ]; then
    echo "`date`: Finished $CMD" | tee --append $LOGFILE
else
    if [ err_msg = "" ]; then
        err_msg="exit code: $exit_code"
    fi
    err_msg="`date`: FAILED $CMD: $err_msg"
    echo err_msg >>$LOGFILE
    echo err_msg >&2
    echo "See $LOGFILE" >&2
fi
exit $exit_code
