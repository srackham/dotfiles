set -g mouse on
set -g prefix C-a
set -g base-index 1
setw -g pane-base-index 1
set -sg escape-time 0     # Disable Escape key "meta" key simulation and latency
set-window-option -g mode-keys vi
set-option -g focus-events on
set -g word-separators " $(printf '\t')"  # Mouse double-click selects to white-space boundaries
set -g default-terminal "tmux-256color"
set -ag terminal-features ",alacritty:RGB"
set -g allow-passthrough    # For inline images

# Set pane styles
set -g pane-border-lines heavy
set -g pane-border-style fg=color240
set -g pane-active-border-style fg=green

# Format status line with window names on LHS, time and date on RHS
set-option -g status-left "#[bg=color227,bold] #{pane_index} "
set-option -g status-right  "#[bg=color227] #H #[bg=color190] %H:%M  %a %d %b %Y "
set-window-option -g window-status-current-style bg=color190,fg=black,bold
set-window-option -g window-status-format " #W:#I "
set-window-option -g window-status-current-format " #W:#I "

# Miscellaneous key bindings
bind-key -n M-Enter copy-mode
bind-key -n F11 resize-pane -Z # Toggle full-screen
bind-key -n M-z resize-pane -Z # Toggle full-screen

# Popup key bindings

# Open Lazygit in popup (the temporary pane is created to switch focus and force nvim to save unsaved files)
bind-key -n M-l split-window \; kill-pane \; popup -E -xC -yC -w 80% -h 100% -d "#{pane_current_path}" \
    "lazygit"
# The following attempt to create a lazygit session (cf. terminal popup) behaves strangely.
#    "(tmux attach -t lazygit-popup || tmux new -s lazygit-popup) && tmux send-keys lazygit Enter"

# Open/Show terminal popup
bind-key -n M-t split-window \; kill-pane \; popup -E -xC -yC -w 80% -h 100% -d "#{pane_current_path}" \
    "tmux attach -t terminal-popup || tmux new -s terminal-popup"
# Hide popup
# Use C-a d to "hide" popup.
# bind-key -n M-c detach

# Pane key bindings
bind-key -n M-0 split-window -v \; resize-pane -D -y 100%     # Create new full-height pane
bind-key -n M-1 select-pane -Z -t 1 \; resize-pane -D -y 100% # Select panes 1..4 with M-1..M-4
bind-key -n M-2 select-pane -Z -t 2 \; resize-pane -D -y 100%
bind-key -n M-3 select-pane -Z -t 3 \; resize-pane -D -y 100%
bind-key -n M-4 select-pane -Z -t 4 \; resize-pane -D -y 100%
bind-key -n M-p select-pane -Z -l \; resize-pane -D -y 100%   # Previous active pane

# Window key bindings
bind-key -n M-w last-window                        # Previous active window
bind-key -n M-] next-window                        # Cycle forwards through windows
bind-key -n M-[ previous-window                    # Cycle backwards through windows
bind-key k kill-window
bind-key > swap-window -t:+ \; select-window -t:+  # Swap window right
bind-key < swap-window -t:- \; select-window -t:-  # Swap window left
bind-key s split-window -vc "#{pane_current_path}" # Horizontal split
bind-key v split-window -hc "#{pane_current_path}" # Vertical split

# Session key bindings
bind-key -n S-F12 switch-client -n                 # Next session
bind-key -n M-S-F12 switch-client -p               # Previous session
